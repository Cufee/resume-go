package internal

import (
	"fmt"
	"strings"
	"time"
)

func filename(title string) string {
	t := time.Now()
	return fmt.Sprintf("%s_%s_%v.pdf", strings.ReplaceAll(title, " ", "_"), t.Month().String()[:3], t.Year()%2000)
}

templ Index(cssPath string, data Resume) {
	<!DOCTYPE html>
	<html data-theme="light">
		<head>
			<meta charset="utf-8"/>
			<meta name="color-scheme" content="light"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<meta property="og:type" content="website"/>
			<meta property="og:title" content={ data.Header.Title.String() }/>
			<meta property="og:description" content={ data.Header.Subtitle.String() }/>
			<meta name="twitter:card" content="summary_large_image"/>
			<meta name="twitter:title" content={ data.Header.Title.String() }/>
			// <meta name="twitter:image" content={ constants.FrontendURL + "/assets/og/default.jpg" }/>
			<meta name="twitter:description" content={ data.Header.Subtitle.String() }/>
			<link href={ cssPath } rel="stylesheet" type="text/css"/>
		</head>
		<body class="flex flex-col justify-center w-screen">
			<a id="download" href="/resume.pdf" download={ filename(data.Header.Title.String()) } class="flex sticky top-0 gap-2 justify-between items-center p-2 w-full opacity-80 transition-all duration-500 print:hidden bg-neutral hover:opacity-100 text-neutral-content">
				<span class="size-6">
					@downloadIcon()
				</span>
				<span class="text-xl">Dowload as PDF</span>
				<div class="w-6"></div>
			</a>
			<div class="flex flex-col gap-8 justify-center p-8 m-auto text-xl text-justify max-w-fit md:flex-row forced-color-adjust-none print:p-12">
				<div class="flex flex-col gap-2 grow">
					@resumeHeader(data.Header)
					@resumeContent(data.Content)
				</div>
				@resumeSidebar(data.Sidebar)
			</div>
		</body>
	</html>
}

templ resumeHeader(data Header) {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2 justify-between sm:flex-row">
			<div class="flex flex-row justify-center">
				<div class="flex flex-col text-nowrap">
					<span class="text-3xl font-bold">{ data.Title.String() }</span>
					<span>{ data.Subtitle.String() }</span>
				</div>
			</div>
			<div class="flex flex-row flex-wrap gap-2 justify-center">
				for _, label := range data.Labels {
					@linkable(label, "badge-primary", "badge-outline", "badge-lg")
				}
			</div>
		</div>
		<div class="flex flex-row flex-wrap gap-2 justify-center lg:justify-around">
			for _, link := range data.Links {
				@linkable(link, "badge-lg", "badge-outline")
			}
		</div>
	</div>
}

templ resumeContent(data Content) {
	<div class="flex flex-col gap-8">
		<div class="flex flex-col gap-2">
			<span class="text-2xl font-bold">
				Summary
				<hr/>
			</span>
			<span>{ data.Summary.String() }</span>
		</div>
		for _, data := range data.Positions {
			@position(data)
		}
		if data.ExpandURL.String() != "" {
			<a href={ templ.URL(data.ExpandURL.String()) } target="_blank" class="flex gap-2 justify-center items-center p-2 rounded-full">
				<div class="w-2 h-2 rounded-full bg-base-300"></div>
				<div class="w-2 h-2 rounded-full bg-base-300"></div>
				<div class="w-2 h-2 rounded-full bg-base-300"></div>
			</a>
		}
	</div>
}

templ position(data Position) {
	<div class="flex flex-col gap-2">
		<div class="flex flex-row gap-2 items-center">
			if data.StartedOn.String() != "" {
				<div class="h-2 rounded-full bg-base-200 grow max-w-8"></div>
				<div class="py-3 text-base badge bg-base-300">{ data.StartedOn.String() }</div>
			}
			<div class="h-2 rounded-full bg-base-300 grow"></div>
			if data.FinishedOn.String() != "" {
				<div class="py-3 text-base badge bg-base-300">{ data.FinishedOn.String() }</div>
				<div class="h-2 rounded-full bg-base-200 grow max-w-8"></div>
			}
		</div>
		<div class="flex flex-col">
			<div class="flex flex-col gap-1 justify-between items-center md:flex-row md:flex-wrap">
				<span class="text-2xl font-bold text-center">{ data.Title.String() }</span>
				<div class="flex flex-row flex-wrap gap-2 justify-center sm:justify-start">
					for _, label := range data.Labels {
						@linkable(label, "badge-lg", "w-32", "justify-center", "flex", "gap-1", "badge-outline")
					}
				</div>
			</div>
		</div>
		<div class="flex flex-row flex-wrap gap-1 justify-center items-center md:justify-start">
			for _, name := range data.Technologies {
				<span class="badge badge-lg badge-primary badge-outline">{ name.String() }</span>
			}
		</div>
		<ol class="flex flex-col gap-2 list-disc">
			for _, bullet := range data.Bullets {
				<li class="ml-4 marker:text-neutral"><span>{ bullet.String() }</span></li>
			}
		</ol>
	</div>
}

templ resumeSidebar(data Sidebar) {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<span class="text-2xl font-bold">
				Skills
				<hr/>
			</span>
			for _, group := range data.Skills {
				<ol class="flex flex-col list-disc">
					for _, skill := range group {
						<li class="ml-4 text-nowrap">{ skill.String() } </li>
					}
				</ol>
				<hr/>
			}
		</div>
		<div class="flex flex-col gap-2">
			for _, data := range data.Projects {
				@project(data)
			}
		</div>
	</div>
}

templ project(data Project) {
	<div class="flex flex-col gap-2">
		<div class="flex flex-col">
			<div class="flex flex-col gap-1 justify-between items-center md:flex-row md:flex-wrap">
				<span class="text-2xl font-bold text-center">{ data.Title.String() }</span>
				<div class="flex flex-row flex-wrap gap-2 justify-center sm:justify-start print:hidden">
					for _, label := range data.Labels {
						@linkable(label, "badge-lg", "w-24", "justify-center", "flex", "gap-1", "badge-outline")
					}
				</div>
			</div>
		</div>
		<div class="flex flex-row flex-wrap gap-1 justify-center items-center md:justify-start">
			for _, name := range data.Technologies {
				<span class="badge badge-lg badge-primary badge-outline">{ name.String() }</span>
			}
		</div>
		<span>
			{ data.Description.String() }
		</span>
	</div>
}

templ linkable(data Linkable, class ...string) {
	if data.URL.Valid {
		<a target="_blank" class={ "py-4", "flex", "flex-row", "gap-1", "items-center", "badge", templ.Classes(class) } href={ templ.URL(data.URL.String) }>
			<span class="size-4 print:hidden">
				@linkIcon()
			</span>
			{ data.Label.String() }
		</a>
	} else {
		<span class={ "py-4", "badge", templ.Classes(class) }>{ data.Label.String() }</span>
	}
}

templ linkIcon() {
	<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
		<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
	</svg>
}

templ lockIcon() {
	<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
		<path stroke-linecap="round" stroke-linejoin="round" d="M16.5 10.5V6.75a4.5 4.5 0 1 0-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 0 0 2.25-2.25v-6.75a2.25 2.25 0 0 0-2.25-2.25H6.75a2.25 2.25 0 0 0-2.25 2.25v6.75a2.25 2.25 0 0 0 2.25 2.25Z"></path>
	</svg>
}

templ locationIcon() {
	<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
		<path stroke-linecap="round" stroke-linejoin="round" d="M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path>
		<path stroke-linecap="round" stroke-linejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z"></path>
	</svg>
}

templ downloadIcon() {
	<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
		<path stroke-linecap="round" stroke-linejoin="round" d="m9 13.5 3 3m0 0 3-3m-3 3v-6m1.06-4.19-2.12-2.12a1.5 1.5 0 0 0-1.061-.44H4.5A2.25 2.25 0 0 0 2.25 6v12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9a2.25 2.25 0 0 0-2.25-2.25h-5.379a1.5 1.5 0 0 1-1.06-.44Z"></path>
	</svg>
}
